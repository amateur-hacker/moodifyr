// src/lib/env.ts
import { z } from "zod";

// Server-side environment variables
const serverSchema = z.object({
  NODE_ENV: z.enum(["development", "production"]).default("development"),
  BETTER_AUTH_URL: z.string().min(1),
  GOOGLE_CLIENT_ID: z.string().min(1),
  GOOGLE_CLIENT_SECRET: z.string().min(1),
  DATABASE_URL: z.string().min(1),
  API_BASE_URL: z.string().min(1),
});

// Client-side environment variables (must start with NEXT_PUBLIC_)
const clientSchema = z.object({
  NEXT_PUBLIC_BASE_URL: z.string().min(1),
});

// Only parse server env on server side
const isServer = typeof window === "undefined";

let serverEnv: z.infer<typeof serverSchema> | undefined;
if (isServer) {
  const parsed = serverSchema.safeParse(process.env);
  if (!parsed.success) {
    console.error("Invalid server environment variables:", parsed.error.issues);
    process.exit(1);
  }
  serverEnv = parsed.data;
}

// Client env can be parsed on both sides
const parsedClientEnv = clientSchema.safeParse({
  NEXT_PUBLIC_BASE_URL: process.env.NEXT_PUBLIC_BASE_URL,
});
if (!parsedClientEnv.success) {
  console.error(
    "Invalid client environment variables:",
    parsedClientEnv.error.issues,
  );
  if (isServer) {
    process.exit(1);
  } else {
    throw new Error("Invalid client environment variables");
  }
}

export const env = {
  // Server-only variables
  ...(serverEnv || {}),
  // Client-accessible variables
  ...parsedClientEnv.data,
} as z.infer<typeof serverSchema> & z.infer<typeof clientSchema>;
